version: '3.4'
volumes:
    prometheus_data: {}
    grafana_data: {}
services:
  rabbitmq:
    image: rabbitmq:3.8
    volumes:
      - ./rabbit.conf:/etc/rabbitmq/rabbitmq.conf
  scraping_worker:
    image: danielpopek/scrapperbase
    image: &img worker
    command: [celery, worker, -BE, --app=worker.app, --concurrency=4]
    environment: &env      
      - CELERY_BROKER_URL=amqp://guest:guest@rabbitmq:5672
      - CELERY_RESULT_BACKEND=rpc
      - SCRAP_LOCATION=london
      - SCRAP_SCHEDULE=15
      - prometheus_multiproc_dir=/multiprocessing
    depends_on:
      - scheduler
      - rabbitmq
      - embedding_worker
    volumes:
      - ./app:/app
      - ./shared/prometheus:/multiprocessing
  embedding_worker:
    image: danielpopek/scrapperbase
    image: *img
    command: [celery, worker, -E, --app=worker.app, --concurrency=4,--pool=gevent, --queues=embedding]
    environment: *env
    depends_on:
      - rabbitmq
    volumes:
      - ./app:/app
  mongodb_worker:
    image: danielpopek/scrapperbase
    image: *img
    command: [celery, worker, -E, --app=worker.app, --pool=solo, --concurrency=1, --queues=mongo]
    environment: *env
    depends_on:
      - rabbitmq
      - mongodb
    volumes:
      - ./app:/app
  time_worker:
    image: danielpopek/scrapperbase
    image: *img
    command: [celery, worker, -E, --app=worker.app, --pool=gevent, --concurrency=20, --queues=time]
    environment: *env
    depends_on:
      - scheduler
      - rabbitmq
    volumes:
      - ./app:/app
  scheduler:
    image: danielpopek/scrapperbase
    image: *img
    command: [celery, beat, --app=worker.app, --loglevel=INFO]
    environment: *env
    depends_on:
      - rabbitmq
    restart: 'no'
    volumes:
      - ./app:/app
  webapp:
    image: danielpopek/scrapperbase
    image: *img
    command: [python, flask_server.py]
    environment: *env
    depends_on:
      - rabbitmq
    volumes:
      - ./app:/app
      - ./shared/prometheus:/multiprocessing
    ports:
      - 6000:5000
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./config/prometheus/:/etc/prometheus/
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yaml'
    expose:
      - 9090
    ports:
      - 9090:9090
  grafana:
    image: grafana/grafana
    depends_on:
      - prometheus
    ports:
      - 3000:3000
    volumes:
      - grafana_data:/var/lib/grafana
  celery-default-stats:
    image: ovalmoney/celery-exporter
    ports:
      - 9540:9540
    environment:
      - CELERY_EXPORTER_BROKER_URL=amqp://guest:guest@rabbitmq:5672
  mongodb:
    image: mongo:latest
    container_name: mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_DATABASE: tweetmldb
      MONGODB_DATA_DIR: /data/db
      MONDODB_LOG_DIR: /dev/null
    ports:
      - 27017:27017
      - 28017:28017
    volumes:
      - ./mongodb_data:/data/db
  # db_setup:
  #   image: redash/redash
  #   command: create_db
  #   depends_on:
  #     - postgres
  #     - redis
  #   environment:
  #     PYTHONUNBUFFERED: 0
  #     REDASH_LOG_LEVEL: "INFO"
  #     REDASH_REDIS_URL: "redis://redis:6379/0"
  #     REDASH_DATABASE_URL: "postgresql://postgres@postgres/postgres"
  #     REDASH_RATELIMIT_ENABLED: "false"
  # server:
  #   image: redash/redash
  #   command: server
  #   depends_on:
  #     - db_setup
  #   ports:
  #     - "5000:5000"
  #     - "5678:5678"
  #   environment:
  #     PYTHONUNBUFFERED: 0
  #     REDASH_LOG_LEVEL: "INFO"
  #     REDASH_REDIS_URL: "redis://redis:6379/0"
  #     REDASH_DATABASE_URL: "postgresql://postgres@postgres/postgres"
  #     REDASH_RATELIMIT_ENABLED: "false"
  # worker:
  #   image: redash/redash
  #   command: worker
  #   depends_on:
  #     - server
  #   environment:
  #     PYTHONUNBUFFERED: 0
  #     REDASH_LOG_LEVEL: "INFO"
  #     REDASH_REDIS_URL: "redis://redis:6379/0"
  #     REDASH_DATABASE_URL: "postgresql://postgres@postgres/postgres"
  #     QUEUES: "queries,scheduled_queries,celery,schemas"
  #     WORKERS_COUNT: 4
  # redis:
  #   image: redis:3-alpine
  #   restart: unless-stopped
  # postgres:
  #   image: postgres:9.5-alpine
  #   ports:
  #     - "15432:5432"
  #   command: "postgres"
  #   restart: unless-stopped


